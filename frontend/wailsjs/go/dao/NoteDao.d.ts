// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
import {gorm} from '../models';
import {sql} from '../models';
import {clause} from '../models';
import {schema} from '../models';
import {model} from '../models';
import {context} from '../models';

export function AddError(arg1:Error):Promise<void>;

export function AddNote(arg1:string):Promise<void>;

export function AfterInitialize(arg1:gorm.DB):Promise<void>;

export function Apply(arg1:gorm.Config):Promise<void>;

export function Assign(arg1:Array<any>):Promise<gorm.DB>;

export function Association(arg1:string):Promise<gorm.Association>;

export function Attrs(arg1:Array<any>):Promise<gorm.DB>;

export function AutoMigrate(arg1:Array<any>):Promise<void>;

export function Begin(arg1:Array<sql.TxOptions>):Promise<gorm.DB>;

export function BindVarTo(arg1:clause.Writer,arg2:gorm.Statement,arg3:any):Promise<void>;

export function Callback():Promise<gorm.callbacks>;

export function Clauses(arg1:Array<clause.Expression>):Promise<gorm.DB>;

export function Commit():Promise<gorm.DB>;

export function Connection(arg1:any):Promise<void>;

export function Count(arg1:any):Promise<gorm.DB>;

export function Create(arg1:any):Promise<gorm.DB>;

export function CreateInBatches(arg1:any,arg2:number):Promise<gorm.DB>;

export function DataTypeOf(arg1:schema.Field):Promise<string>;

export function Debug():Promise<gorm.DB>;

export function DefaultValueOf(arg1:schema.Field):Promise<clause.Expression>;

export function Delete(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function DeleteNote(arg1:string):Promise<void>;

export function Distinct(arg1:Array<any>):Promise<gorm.DB>;

export function Done(arg1:string):Promise<void>;

export function EditRank(arg1:model.Note):Promise<void>;

export function Exec(arg1:string,arg2:Array<any>):Promise<gorm.DB>;

export function Explain(arg1:string,arg2:Array<any>):Promise<string>;

export function Find(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function FindInBatches(arg1:any,arg2:number,arg3:any):Promise<gorm.DB>;

export function First(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function FirstOrCreate(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function FirstOrInit(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function Get(arg1:string):Promise<any|boolean>;

export function GetNotes():Promise<Array<model.Note>>;

export function Group(arg1:string):Promise<gorm.DB>;

export function Having(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function Initialize(arg1:gorm.DB):Promise<void>;

export function InnerJoins(arg1:string,arg2:Array<any>):Promise<gorm.DB>;

export function InstanceGet(arg1:string):Promise<any|boolean>;

export function InstanceSet(arg1:string,arg2:any):Promise<gorm.DB>;

export function Joins(arg1:string,arg2:Array<any>):Promise<gorm.DB>;

export function Last(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function Limit(arg1:number):Promise<gorm.DB>;

export function MapColumns(arg1:{[key: string]: string}):Promise<gorm.DB>;

export function Migrator():Promise<gorm.Migrator>;

export function Model(arg1:any):Promise<gorm.DB>;

export function Name():Promise<string>;

export function Not(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function Offset(arg1:number):Promise<gorm.DB>;

export function Omit(arg1:Array<string>):Promise<gorm.DB>;

export function Or(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function Order(arg1:any):Promise<gorm.DB>;

export function Pluck(arg1:string,arg2:any):Promise<gorm.DB>;

export function Preload(arg1:string,arg2:Array<any>):Promise<gorm.DB>;

export function QuoteTo(arg1:clause.Writer,arg2:string):Promise<void>;

export function Raw(arg1:string,arg2:Array<any>):Promise<gorm.DB>;

export function Rollback():Promise<gorm.DB>;

export function RollbackTo(arg1:string):Promise<gorm.DB>;

export function Row():Promise<sql.Row>;

export function Rows():Promise<sql.Rows>;

export function Save(arg1:any):Promise<gorm.DB>;

export function SavePoint(arg1:string):Promise<gorm.DB>;

export function Scan(arg1:any):Promise<gorm.DB>;

export function ScanRows(arg1:sql.Rows,arg2:any):Promise<void>;

export function Scopes(arg1:Array<any>):Promise<gorm.DB>;

export function Select(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function Session(arg1:gorm.Session):Promise<gorm.DB>;

export function Set(arg1:string,arg2:any):Promise<gorm.DB>;

export function SetupJoinTable(arg1:any,arg2:string,arg3:any):Promise<void>;

export function Table(arg1:string,arg2:Array<any>):Promise<gorm.DB>;

export function Take(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function ToSQL(arg1:any):Promise<string>;

export function Transaction(arg1:any,arg2:Array<sql.TxOptions>):Promise<void>;

export function Unscoped():Promise<gorm.DB>;

export function Update(arg1:string,arg2:any):Promise<gorm.DB>;

export function UpdateColumn(arg1:string,arg2:any):Promise<gorm.DB>;

export function UpdateColumns(arg1:any):Promise<gorm.DB>;

export function Updates(arg1:any):Promise<gorm.DB>;

export function Use(arg1:gorm.Plugin):Promise<void>;

export function Where(arg1:any,arg2:Array<any>):Promise<gorm.DB>;

export function WithContext(arg1:context.Context):Promise<gorm.DB>;
